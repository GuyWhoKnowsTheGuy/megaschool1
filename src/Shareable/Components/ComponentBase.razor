@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient http
@inject NavigationManager NavigationManager

@code {
    public static readonly string DefaultUsername = "MS1";

    private const string SettingsKey = "settings";

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [CascadingParameter]
    public AppState? AppState { get; set; }

    protected bool ComponentInitialized { get; private set; }

    protected override void OnInitialized()
    {
        this.ComponentInitialized = true;
        this.StateHasChanged();
    }

    protected async Task CopyTextToClipboardAsync(string text)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", text);
    }

    protected static string BusinessEnrollmentUrl(string username) => $"https://user.mwrfinancial.com/{username}/join";
    protected static string MembershipEnrollmentUrl(string username) => $"https://user.mwrfinancial.com/{username}/signup-financialedge";
    protected static string InstantPayRaiseUrlEnglish(string username) => $"https://www.mwrfinancial.com/iprr/?member={username}";
    protected static string InstantPayRaiseUrlSpanish(string username) => $"https://www.mwrfinancial.com/es/iprr/?member={username}";
    protected static string MarketingDirectorUrlEnglish(string username) => $"https://www.mwrfinancial.com/?member={username}";
    protected static string MarketingDirectorUrlSpanish(string username) => $"https://www.mwrfinancial.com/es/?member={username}";

    protected async Task<Repository.Settings> GetSettingsAsync()
    {
        Repository.Settings? foundSettings = null;

        if (await localStorage.ContainKeyAsync(SettingsKey))
        {
            foundSettings = await localStorage.GetItemAsync<Repository.Settings>(SettingsKey);
        }

        return foundSettings ?? new();
    }

    protected async Task SaveSettingsAsync(Repository.Settings settings)
    {
        await localStorage.SetItemAsync(SettingsKey, settings);

    }

    protected async Task<string> GetUsernameAsync()
    {
        string? foundUsername = null;

        if (await localStorage.ContainKeyAsync(SettingsKey))
        {
            foundUsername = (await localStorage.GetItemAsync<Repository.Settings>(SettingsKey))?.Username;

            // validate username
            if (string.IsNullOrWhiteSpace(foundUsername))
            {
                foundUsername = null;
            }
            else
            {
                // check if username belongs to an active Qualified Financial Director (QFD)
                var userBusinessEnrollmentPage = await GetAsync(BusinessEnrollmentUrl(foundUsername));
                if (userBusinessEnrollmentPage?.IsSuccessStatusCode is not true)
                {
                    foundUsername = null;
                }
            }
        }

        return foundUsername ?? DefaultUsername;
    }

    private async Task<HttpResponseMessage?> GetAsync(string url)
    {
        HttpResponseMessage? response = null;

        try
        {
            response = await http.GetAsync(url);
        }
        catch(Exception) { }

        return response;
    }
}
